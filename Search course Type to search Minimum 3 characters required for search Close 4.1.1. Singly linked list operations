#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct LinkedList {
    struct Node* head;
    int size;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct LinkedList* initializeList() {
    return list;
}

void insert(struct LinkedList* list, int data, int position) {
    // write your code here for insertion
    struct Node* newNode = createNode(data);
    if(position == 0){
		newNode->next = list->head;
		list->head = newNode;
		printf("Element %d inserted at position %d\n",data,position);
		return;
	}
    struct Node* current = list->head;
	int count = 0;
	while (current != NULL && count < position - 1){
		current = current->next;
		count++;
	}
    if(current == NULL){
		printf("Invalid position\n");
		free(newNode);
		return;
	}
newNode->next = current->next;
	current->next = newNode;
	printf("Element %d inserted at position %d\n",data,position);
}
void deleteNode(struct LinkedList* list, int position) {
		list->head = list->head->next;
		printf("Element at position %d deleted\n", position);
		free(current);
		return;
	}
    struct Node* prev = NULL;
	for(int i = 0; current != NULL && i < position; i++){
		prev = current;
		current = current->next;
	}
    if(current == NULL){
		printf("Invalid position\n");
		return;
	}
	prev->next = current->next;
	printf("Element at position %d deleted\n",position);
	free(current);
}
void reverse(struct LinkedList* list) {
    // write your code here 
    struct Node* prev=NULL;
	struct Node* current=list->head;
	struct Node* next=NULL;
	while(current !=NULL){
		next = current->next;
		current->next=prev;
		prev = current;
		current = next;
	}
list->head = prev;
}
        insert(list, data, i);
    }
    int choice, position;
    while (1) {
        printf("Linked List Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Reverse\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter position to insert: ");
                scanf("%d", &position);
                insert(list, data, position);
                break;
            case 2:
                printf("Enter position to delete: ");
                scanf("%d", &position);
                deleteNode(list, position);
                break;
            case 3:
                reverse(list);
                printf("Reversed List: ");
                displayReversed(list);
                reverse(list); 
                break;
            case 4:
                printf("Linked List: ");
                display(list);
                break;
            case 5:
                printf("Exiting program\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}

